{"version":3,"sources":["components/card/card.js","components/card-list/list.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","monster","className","src","id","alt","name","email","CardList","console","log","listMonsters","length","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","setListMonsters","searchField","setSearchField","useEffect","fetch","then","response","json","user","catch","err","event","target","value","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAIaA,EAAO,SAACC,GACnB,IAAOC,EAAWD,EAAXC,QACP,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YAC1E,oCAAKJ,QAAL,IAAKA,OAAL,EAAKA,EAASK,OACd,mCAAIL,QAAJ,IAAIA,OAAJ,EAAIA,EAASM,YCLNC,EAAW,SAACR,GAAW,IAAD,EAEjC,OADAS,QAAQC,IAAIV,EAAO,SAEjB,qBAAKE,UAAU,YAAf,UAES,OAALF,QAAK,IAALA,GAAA,UAAAA,EAAOW,oBAAP,eAAqBC,QAAS,IAA9B,OAAmCZ,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAOW,aAAaE,KAAI,SAAAZ,GAAO,OAChE,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQG,WCRlCU,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6BDG,MAjCf,WACE,MAAwCC,mBAAS,IAAjD,mBAAOT,EAAP,KAAqBU,EAArB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAoBA,OAlBAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIR,EAAgBQ,MAC7BC,OAAM,SAAAC,GAAG,OAAItB,QAAQC,IAAIqB,QAC3B,IAcD,sBAAK7B,UAAU,MAAf,UACE,cAAC,EAAD,CACEa,YAAa,iBACbC,aAAc,SAAAgB,GAAK,OAfJ,SAAAA,GACnBT,EAAeS,EAAMC,OAAOC,OAcDlB,CAAagB,MAEtC,cAAC,EAAD,CAAUrB,cAZZF,QAAQC,IAAI,SACLC,EAAawB,QAAO,SAAAlC,GAAO,OAChCA,EAAQK,KAAK8B,cAAcC,SAASf,EAAYc,yBCXvCE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.26f96676.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n  const {monster} = props;\n  return (\n    <div className='card-container'>\n      <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n      <h2>{monster?.name}</h2>\n      <p>{monster?.email}</p>\n    </div>\n  )\n};\n\nCard.propTypes = {\n  monster: PropTypes.object,\n};\n","import React from 'react';\nimport './card-list.styles.css';\nimport PropTypes from 'prop-types';\nimport {Card} from \"../card/card\";\n\nexport const CardList = (props) => {\n  console.log(props, 'props');\n  return (\n    <div className='card-list'>\n      {\n        props?.listMonsters?.length > 0 && props?.listMonsters.map(monster => (\n          <Card monster={monster} key={monster.id}/>\n        ))\n      }\n    </div>\n  );\n};\n\n\nCardList.propTypes = {\n  listMonsters: PropTypes.array,\n};\n\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './search-box.styles.css'\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className='search'\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n\nSearchBox.propTypes = {\n  placeholder: PropTypes.string,\n  handleChange: PropTypes.func,\n};\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { CardList } from \"./components/card-list/list\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nfunction App() {\n  const [listMonsters, setListMonsters] = useState([]);\n  const [searchField, setSearchField] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(user => setListMonsters(user))\n      .catch(err => console.log(err));\n  }, []);\n\n  const handleChange = event => {\n    setSearchField(event.target.value);\n  };\n\n  const filterMonsters = () => {\n    console.log(\"davao\");\n    return listMonsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchBox\n        placeholder={\"search monster\"}\n        handleChange={event => handleChange(event)}\n      />\n      <CardList listMonsters={filterMonsters()} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}